package message_queueing;

option go_package="./queueing";


// Queue message used as input
//
// Data type used when submitting new messages to the system.
message RawQueueMessage {
  // raw message data as a byte array, the bytes will be returned as they are received
  required bytes data = 1;
  // attributes associated with the message, can be used to represent metadata
  map<string, string> attributes = 2;
}

// Queue message representation in the system
//
// QueueMessage represents the a RawQueueMessage after it has been submitted
// into the system. The RawQueueMessage is enhanced with metadata and identifiers
message QueueMessage {
  // raw message data as a byte array
  required bytes data = 1;
  // the message unique id (UUID) as a byte array
  required bytes messageID = 2;
  // timestamp when the message entered the system
  required int64 timestamp = 3;
  // md5 hash of the raw message data
  required bytes dataHash = 4;
  // attributes associated with the message
  map<string, string> attributes = 5;
}

message SubmitReceipt {
  required bool ok = 1;
  required string messageID = 2;
  optional int64 timestamp = 3;
  optional bytes dataHash = 4;
}

message SubmitMessagesRequest {
  required string queueID = 1;
  repeated RawQueueMessage messages = 2;
}

message SubmitMessagesResponse {
  repeated SubmitReceipt receipts = 1;
}

message RetrieveMessagesRequest {
  required int32 count = 1;
}

message RetrieveMessagesResponse {
  required int32 count = 1;
  repeated QueueMessage messages = 2;
}

message AcknowledgeMessagesRequest {}
message AcknowledgeMessagesResponse {}

//
service QueueService {
  rpc SubmitMessages(SubmitMessagesRequest) returns (SubmitMessagesResponse);
  rpc RetrieveMessages(RetrieveMessagesRequest) returns (RetrieveMessagesResponse);
  rpc AcknowledgeMessages(AcknowledgeMessagesRequest) returns (AcknowledgeMessagesResponse);
}
